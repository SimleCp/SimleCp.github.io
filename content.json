{"meta":{"title":"zedxpp-blog","subtitle":"蜗牛, 为梦想而生。","description":"蜗牛, 为梦想而生。","author":"zedxpp","url":"http://zedxpp.com"},"pages":[{"title":"About","date":"2016-02-19T08:17:05.000Z","updated":"2018-01-05T08:26:28.000Z","comments":false,"path":"about/index.html","permalink":"http://zedxpp.com/about/index.html","excerpt":"","text":"iOS developerEmail: zedxpp@gmail.com","raw":null,"content":null},{"title":"categories","date":"2016-02-19T07:35:59.000Z","updated":"2016-02-25T08:15:58.000Z","comments":false,"path":"categories/index.html","permalink":"http://zedxpp.com/categories/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"tags","date":"2016-02-19T07:30:49.000Z","updated":"2016-02-25T08:16:04.000Z","comments":false,"path":"tags/index.html","permalink":"http://zedxpp.com/tags/index.html","excerpt":"","text":"","raw":null,"content":null}],"posts":[{"title":"Swift Perfect服务端的自动化部署","slug":"Swift Perfect服务端的自动化部署","date":"2017-12-01T12:47:11.000Z","updated":"2018-01-10T07:58:18.000Z","comments":true,"path":"2017/12/01/Swift Perfect服务端的自动化部署/","link":"","permalink":"http://zedxpp.com/2017/12/01/Swift Perfect服务端的自动化部署/","excerpt":"","text":"最开始学习Perfect框架的时候, 就思考过如何部署.后来也试过不少方式, 在今天一个比较特殊的情况下, 找到了一个我觉得目前最完美的部署方式.当然, 如果你用的是Perfect官方支持的阿里云, 亚马逊, 谷歌云这三种, 那么请直接前往这个地址就可以了. http://perfect.org/zh/assistant/ 如果你和我一样, 用的是普通的vps, 那么, 请继续往下看.(贫穷使我触发无限可能 -. -)也许我的部署方式并不是最完美的, 如果你有更好的方式, 可以在下面评论告诉我.不甚感激.曾经尝试过的部署方式思路, 有几种. 1.通过在服务器用git的钩子进行部署, 在服务器上, 会有两个用户, 一个root用户, 一个git用户, 但是如果不用root权限的话, git权限的用户找不到编译环境, 如果强行把编译环境修改到git权限的用户,那么root用户又无法编译了. 自动编译不能用, 所以只能手动编译和启动. 在无法找到更完美的部署方式前, 一直用的这个.我目前的操作步骤, 在服务器上创建一个git文件夹, 然后通过钩子, 监听到push后, 打包该文件, 拷贝到一个编译目录, (直接在原来的目录上进行编译, 也是可以的), 然后解压, 解压后手动通过ssh进行编译和启动. 2.通过官方支持的docker进行部署, 但是在本地docker环境里面进行编译的时候, 始终无法完成编译, 说缺少openssl的一个头文件,但是在本地编译是正常的.在两台系统版本号不同的电脑上, 都尝试过, 结果一样, 所以不知道是哪里错了…很无奈… 3.这一种方式, 也是目前我个人发现的最完美的方式了. 不多BB, 看思路图. 所用到的环境以及工具1 宝塔面板让服务器ssh界面化, 也是自动化部署的关键, 你可以采取其他的监听webhook的方式, 也可以达到同样目的 在使用面板的时候, 设置好代码的端口后(比如8080), 记得在这个里面对你的端口进行放行, 否则无法访问. 2 阿里云代码托管3 Ubuntu服务器4 把Ubuntu服务器的公钥添加到阿里云代码托管平台操作步骤1.在代码托管平台创建代码仓库. 2.在服务器创建你存放Perfect代码的目录, 对代码平台的代码仓库进行git clone 3.在宝塔面板上安装webhook 注: 通过宝塔面板可以访问操作文件和文件夹, 并且面板自带了很多有用的工具, nginx, 数据库, 等.我觉得非常方便友好, 并且这个东西是免费的, 一键安装, 强烈建议使用. 具体有哪些功能你可以去官网看, 反正点一下又不会怀孕不是. http://bt.cn 4.安装完后添加Hook.名称随便写. 脚本内容如下(你也可以根据你自己的情况进行精简), 导入编译环境的教程地址 http://www.jianshu.com/p/538b685b6a62 5.把添加后的面板请求地址和密匙添加到代码仓库的webhooks(我是用push事件来做的.你也可以用其他方式.比如tag) 6.添加成功后, 就会像这样 7.都设置成功后, 你可以在你的面板上测试面板的webhook操作是否正确, 阿里云代码托管平台也可以测试发起请求的操作是否正确. TEST HOOK 8.在本地拉取阿里云代码仓库的代码, 进行代码提交, 触发以上一系列的webhook. 以下是成果图 简洁思路: 如果你设置的是push事件, 当阿里云代码托管收到你的代码push后, 会去请求服务器的webhook, 服务器的webhook收到请求后, 会在服务器进行1进入代码目录, 2拉取阿里云的代码, 3编译并且启动的操作.感受自动化部署的愉悦吧! 如果你觉得文章帮助了你, 关注我不迷路, 后面还会分享Perfect的更多姿势.","raw":null,"content":null,"categories":[{"name":"Swift-Perfect","slug":"Swift-Perfect","permalink":"http://zedxpp.com/categories/Swift-Perfect/"}],"tags":[]},{"title":"在Ubuntu安装MySql","slug":"在Ubuntu安装MySql","date":"2017-10-07T11:46:57.000Z","updated":"2018-01-10T08:08:03.000Z","comments":true,"path":"2017/10/07/在Ubuntu安装MySql/","link":"","permalink":"http://zedxpp.com/2017/10/07/在Ubuntu安装MySql/","excerpt":"","text":"安装数据库打开终端, 链接服务器, 输入sudo apt-get install mysql-server mysql-client安装MySql数据库. 安装过程中会叫你输入两次密码, 安装完成后, 输入mysql -u root -p, 输入刚刚的密码, 进入数据库. 配置数据库的远程访问有时候需要远程管理服务器上的数据库, 就要配置远程访问. 输入\\q退出数据库.cd /etc/mysql/mysql.conf.d/进入文件夹, vi mysqld.cnf打开配置文件, 把bind-address = 127.0.0.1前面加个#给注释了. 然后重新mysql -u root -p进入数据库, 执行GRANT ALL PRIVILEGES ON *.* TO &#39;&lt;user&gt;&#39;@&#39;%&#39; IDENTIFIED BY &#39;&lt;password&gt;&#39; WITH GRANT OPTION;, &lt;user&gt;换成你想设置的用户名, &lt;password&gt;换成密码, &#39;&#39;不能少了, 然后再执行FLUSH PRIVILEGES刷新权限. 最后重启一下数据库. mac和ubuntu的数据库命令是不一样的 123sudo service mysql start 开启sudo service mysql stop 停止sudo service mysql restart 重启 打开电脑上的的数据库软件, 输入你的服务器ip地址, 端口号默认3306, 输入刚刚设置的用户名和密码.连接. 现在, 你已经用本地数据库软件成功连接服务器上的数据库了.","raw":null,"content":null,"categories":[{"name":"Swift-Perfect","slug":"Swift-Perfect","permalink":"http://zedxpp.com/categories/Swift-Perfect/"}],"tags":[]},{"title":"开启你的Swift服务器之旅-Perfect框架","slug":"开启你的Swift服务器之旅-Perfect框架","date":"2017-10-07T11:46:57.000Z","updated":"2018-01-21T02:43:51.000Z","comments":true,"path":"2017/10/07/开启你的Swift服务器之旅-Perfect框架/","link":"","permalink":"http://zedxpp.com/2017/10/07/开启你的Swift服务器之旅-Perfect框架/","excerpt":"","text":"前言一直想学习一门后端语言, 能够写一些Api给自己的App使用. 考虑过js配合node.js, 后来放弃了. 最开始看到swift相关的新闻, 已经知道swift能够编写服务器, 但是一直没有怎么关注, 直到那天我简单看了一下swift的几个服务器框架, 才发现今日的swift服务器框架, 早已足够满足我的现有需求了. 为什么要选择Perfect这个框架, 是因为他星星最多, 中英文文档. 非常友好. https://github.com/perfectlySoft/Perfect https://github.com/vapor/Vapor https://github.com/ibm-swift/kitura https://github.com/zewo/Zewo 看完系列文章, 你能收获什么? Perfect在Mac本地环境的配置 在Ubuntu服务器上配置Swift编译环境 在Ubuntu服务器上安装MySql 使用Supervisor让你的Swift服务器项目后台运行 Swift Perfect服务端的自动化部署 当你掌握了以上的姿势后, 你就可以给自己编写接口了, 是不是很赤鸡? 其实Perfect有自己的部署工具https://perfect.org/zh/assistant/, 但是仅限于亚马逊云EC2服务器部署和Google App Engine 谷歌应用引擎部署, 鉴于自己买非以上两种的vps比较便宜, 而且自己写点接口, 不需要这么贵.","raw":null,"content":null,"categories":[{"name":"Swift-Perfect","slug":"Swift-Perfect","permalink":"http://zedxpp.com/categories/Swift-Perfect/"}],"tags":[]},{"title":"在Ubuntu服务器配置Swift编译环境","slug":"在Ubuntu服务器配置Swift编译环境","date":"2017-10-07T11:46:57.000Z","updated":"2018-01-10T08:03:17.000Z","comments":true,"path":"2017/10/07/在Ubuntu服务器配置Swift编译环境/","link":"","permalink":"http://zedxpp.com/2017/10/07/在Ubuntu服务器配置Swift编译环境/","excerpt":"","text":"安装Ubuntu购买vps, 安装Ubuntu, 请安装以下3种os中的任意一种. 我购买的vps上, 最新并且最兼容swift的是Ubuntu16.04 64位的. Ubuntu 14.04, 16.04 or 16.10 (64-bit) 配置Swift编译环境终端连接vps打开终端, 输入 ssh root@vps的ip地址, 输入vps的密码(vps自动生成的), 比如 ssh root@133.84.12.61 第一次连接会出现一个输入yes和no的询问, 输入yes回车继续 当终端的开头变的和之前不一样的时候, 就是连接成功了, 比如我的, root@swift:~# 配置必要环境输入以下命令安装必须的库 1sudo apt-get install openssl libssl-dev uuid-dev 现在, 你已经用终端和vps连接成功了, 接下来创建两个文件夹, 分别存放你的swift代码和swift工具的编译环境 查看当前文件夹 12ls 查看当前目录下的文件夹, 不显示隐藏文件ls -a 查看当前目录下的文件夹, 显示隐藏文件 分别输入以下命令, 创建Code文件夹和Swift文件夹, 前者用来存放代码, 后者用来存放swift的编译环境(文件夹名字你可以自己取) 12mkdir Codemkdir Swift 输入 ls -a 继续查看文件夹 cd Swfit 进入文件夹, 输入 sudo apt-get install clang libicu-dev 安装必要的工具, 出现问你是否继续的, 直接输入 y 继续 安装完成 配置swift编译工具进入swift官方网站, 获取下载地址, https://swift.org/download/ 我选择的是Releases版本, Swift 4.0, Ubuntu 16.04版本, 版本和你的vps系统版本对应即可. 选中Ubuntu 16.04, 右键获取链接地址, https://swift.org/builds/swift-4.0-release/ubuntu1604/swift-4.0-RELEASE/swift-4.0-RELEASE-ubuntu16.04.tar.gz 记录下来. 在对应的Ubuntu 16.04下面, 选中Signature, 继续获取Signature的地址, 继续记录下来. 第一个获取的是swift编译环境的地址, 第二个获取的是对应编译环境的签名地址. 在终端中输入 wget 刚刚获取的swift编译环境的地址 wget https://swift.org/builds/swift-4.0-release/ubuntu1604/swift-4.0-RELEASE/swift-4.0-RELEASE-ubuntu16.04.tar.gz 在终端中输入 wget 签名地址 等文件都下载完成后, 继续输入, 123456gpg --keyserver hkp://pool.sks-keyservers.net \\ --recv-keys \\ &apos;7463 A81A 4B2E EA1B 551F FBCF D441 C977 412B 37AD&apos; \\ &apos;1BE1 E29A 084C B305 F397 D62A 9F59 7F4D 21A5 6D5F&apos; \\ &apos;A3BA FD35 56A5 9079 C068 94BD 63BC 1CFE 91D3 06C6&apos; \\ &apos;5E4D F843 FB06 5D7F 7E24 FBA2 EF54 30F0 71E1 B235&apos; 输入ls查看当前文件夹, 文件夹中有两个, 一个是swift编译工具的压缩包状态, 一个是签名文件. 从终端中复制签名文件的名字, swift-4.0-RELEASE-ubuntu16.04.tar.gz.sig 在前面加上 gpg --verify, 变成 gpg --verify swift-4.0-RELEASE-ubuntu16.04.tar.gz.sig, 进行验证, 出现和图上一样的, 表示没问题. 输入 tar xzf 包名, 进行解压. 再次输入ls, 会发现多了一个文件夹. 进入刚刚解压出来的文件夹里面, 再进入usr, 进入bin, 输入pwd, 获取全路径, 记录下来. 输入cd ~进入根目录, 输入ls -a, 输入vi .profile打开文件 在当前文件中加入export PATH=刚刚获取的全路径:&quot;${PATH}&quot;, 不要加到最后面一句命令的后面了. 否则就不能正常生效.把刚刚加入进去的那句命令复制(后面要用) 退出并保存.profile文件, 粘贴刚刚赋值的命令, 执行. 输入swift --version, 出现正确版本号, swift编译环境搭建完毕. 在vps上编译项目继续查看当前文件夹, 进入Code文件夹, 按照之前在本地快速搭建服务器的方法, 再克隆并运行一次.swift build的时候, 如果出现和图中一样的error, error while loading shared libraries: libcurl.so.4: cannot open shared object file: No such file or directory, 输入sudo apt-get install libcurl3, 安装libcurl3, 继续后续步骤, 编译成功后, 使用服务器地址:8181访问, 网页中出现Hello, world!, 也就美滋滋了~","raw":null,"content":null,"categories":[{"name":"Swift-Perfect","slug":"Swift-Perfect","permalink":"http://zedxpp.com/categories/Swift-Perfect/"}],"tags":[]},{"title":"使用Supervisor让你的Swift服务器项目后台运行","slug":"使用Supervisor让你的Swift服务器项目后台运行","date":"2017-10-07T11:46:57.000Z","updated":"2017-10-07T12:05:29.000Z","comments":true,"path":"2017/10/07/使用Supervisor让你的Swift服务器项目后台运行/","link":"","permalink":"http://zedxpp.com/2017/10/07/使用Supervisor让你的Swift服务器项目后台运行/","excerpt":"","text":"需求当你按control + c退出vps上的swift项目运行的时候, 其实你的项目已经停止了, 用服务器ip+端口号访问, 已经无法响应了. 这个时候就需要用supervisor来让项目一直在后台运行, 这样, 你编写的api才能一直能访问. 基本配置和说明打开终端连接上服务器.创建找一个文件夹存放你的脚本.我存放在Code文件夹, 并且创建了一个文件, 名字叫script.sh的文件. /root/Code/script.sh, 也就是你需要supervisor帮你执行这个脚本.并且一直后台运行. /root/Code的script.sh里面, 编写着路径地址和执行命令. 12cd /root/Code/PerfectTemplate.build/debug/PerfectTemplate 安装并配置输入sudo apt-get install supervisor安装supervisor. 安装完成后, 进入cd /etc/supervisor/conf.d, 创建并编辑 vim swiftServer.conf, swiftServer是我的文件名和program名, 你也可以用你喜欢的. 在文件中粘贴以下代码, 1234567891011[program:swiftServer] // swiftServer 刚刚取的program名command=sh script.sh // 执行的脚本名称process_name=%(program_name)sdirectory=/root/Code // 执行的脚本路径autorestart=trueuser=root // 用户名 更多的supervisor配置信息请自行查阅, 这里只保证项目能正常启动起来. 输入supervisorctl reload让你刚刚的配置生效. 输入supervisorctl start swiftServer启动并后台运行 再次在网页中打开服务器ip:8181, Hello, world!时刻与你同在. ^.^","raw":null,"content":null,"categories":[{"name":"Swift-Perfect","slug":"Swift-Perfect","permalink":"http://zedxpp.com/categories/Swift-Perfect/"}],"tags":[]},{"title":"Swift Perfect Mac本地环境配置","slug":"Swift Perfect Mac本地环境配置","date":"2017-10-07T11:46:57.000Z","updated":"2018-01-10T07:56:06.000Z","comments":true,"path":"2017/10/07/Swift Perfect Mac本地环境配置/","link":"","permalink":"http://zedxpp.com/2017/10/07/Swift Perfect Mac本地环境配置/","excerpt":"","text":"Perfect框架中文文档地址: http://perfect.org/docs/index_zh_CN.html 开启本地服务器首先, 根据Perfect框架的官网文档, 快速开启本地服务器 http://perfect.org/docs/gettingStarted_zh_CN.html 数据库选择后端开发, 必不可少的便是数据库, Perfect框架支持好几种数据库, 我自己选用的是MySql数据库, 以下所有教程都是基于MySql数据库进行展开的. 教程所有内容主要是以在本地和服务器部署各种环境为主, 避免浪费不必要的时间在部署环境上. 在Mac上安装MySql打开终端, 安装mysql(请勿使用dmg的方式安装mysql, 经我测试, 发现会碰到一些麻烦的问题) 1brew install mysql 在Mac OS 10.12 上面, 直接安装即可. 在Mac OS 10.13 上面, 可能需要更新Homebrew, 更新Homebrew又需要Ruby, 更新Ruby又需要Rvm等等. 在这个版本的操作系统上面, Homebrew拿不到/usr/local文件夹的读写权限, 按照官方给出的解决方法(https://github.com/Homebrew/brew/issues/3228), 在我自己的mac电脑上并不行, 来回折腾了1个多小时还是不行, 我决定采取暴力方法.直接卸载重装Homebrew, 重新安装后, 顺利的在mac上安装好了mysql. 如果你也需要采用这种暴力方法, 请继续看, 如果你已经顺利安装了, 直接跳过卸载重装的部分. 卸载Homebrew1234$ cd `brew --prefix` $ rm -rf Cellar$ brew prune $ rm -rf Library .git .gitignore bin/brew README.md share/man/man1/brew $ rm -rf ~/Library/Caches/Homebrew 参考来自 重新安装Homebrew进入Homebrew官网 https://brew.sh/index_zh-cn.html, 复制这里的命令到终端安装即可(安装命令可能会变, 所以请自行前往复制) MySql启动与配置安装完成后, 手动启动mysql 123mysql.server start # 启动mysql.server stop # 停止mysql.server restart # 重启 打开数据库 1mysql -u root -p 设置mysql密码 1UPDATE user SET authentication_string=PASSWORD(&apos;newpassword&apos;) where USER=&apos;root&apos;; 更新用户名和密码, 用户名建议用root, 后面的教程都会以此为例子. 设置完密码后刷新权限 1FLUSH PRIVILEGES 输入 \\q 退出数据库 重新登录数据库, 尝试用新密码进入, 如果成功, 退出数据库, 进行接下来的步骤. 建议在网上找一个数据库软件, 更加直观的查看数据和调试. 代码连接数据库接下来回到本地服务器项目代码这边. 打开Package.swift导入.Package(url:&quot;https://github.com/PerfectlySoft/Perfect-MySQL.git&quot;, majorVersion: 3), 注意最后面有个逗号. 在终端执行swift build和swift package generate-xcodeproj, 用xcode打开项目.打开main.swift 1234567import PerfectMySQL // 导入// 配置数据库信息let testHost = &quot;127.0.0.1&quot;let testUser = &quot;root&quot;let testPassword = &quot;数据库密码&quot;let testDB = &quot;mysql&quot; 除了密码需要改成你自己设置的密码, 其他的照搬 加入以下函数并调用, 在这个函数声明之后, 随处调用即可 123456789101112131415func fetchData() &#123; let mysql = MySQL() // 创建一个MySQL连接实例 let connected = mysql.connect(host: testHost, user: testUser, password: testPassword) guard connected else &#123; // 验证一下连接是否成功 print(mysql.errorMessage()) return &#125; print(\"\\(mysql.listDatabases())\") defer &#123; mysql.close() //这个延后操作能够保证在程序结束时无论什么结果都会自动关闭数据库连接 &#125;&#125; 运行项目, 控制台打印 [&quot;information_schema&quot;, &quot;mysql&quot;, &quot;performance_schema&quot;, &quot;sys&quot;] 表示数据库已经用代码连接成功.","raw":null,"content":null,"categories":[{"name":"Swift-Perfect","slug":"Swift-Perfect","permalink":"http://zedxpp.com/categories/Swift-Perfect/"}],"tags":[]},{"title":"为你的hexo博客配置个性域名","slug":"为你的hexo博客配置个性域名","date":"2017-03-05T14:49:43.000Z","updated":"2018-01-10T07:55:41.000Z","comments":true,"path":"2017/03/05/为你的hexo博客配置个性域名/","link":"","permalink":"http://zedxpp.com/2017/03/05/为你的hexo博客配置个性域名/","excerpt":"","text":"前言文章以阿里云的.com域名为例子, 你也可以购买其他后缀的域名. 购买1.打开阿里云https://wanwang.aliyun.com/, 输入你想搜索的域名, 点击查域名. 2.选好域名, 域名的后缀, 加入清单, 确认信息, 然后去结算. 3.确定域名, 年限, 持有者为个人, 创建信息模板. 立即购买. 4.结算完成后, 点击右上角的控制台, 为域名进行解析. 解析1.点击域名, 域名列表, 找到域名进行解析. 2.添加3条解析记录.初次解析可能会有点慢. 记录类型, 主机记录, 记录值, 是需要我们填写的, 其他的不要管. 按我下面的指示填写, 除了pengpengtest.github.io中的pengpengtest需要换成你的github用户名, 其他的照着填. 1234记录类型 主机记录 记录值CNAME www 你的github用户名.github.ioA @ 192.30.252.153A @ 192.30.252.154 本地配置1.先进入桌面, cd 你的hexo本地目录, cd source, touch CNAME创建CNAME文件, open CNAME打开并编辑. 2.填入域名, 不用加任何http://或者www, 填写完成后保存退出. 3.输入../回到你的hexo本地目录. hexo g -d重新生成部署. 4.然后访问域名, 比如我的, swift520.com, 成功!~","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://zedxpp.com/categories/Hexo/"}],"tags":[{"name":"配置Hexo域名","slug":"配置Hexo域名","permalink":"http://zedxpp.com/tags/配置Hexo域名/"}]},{"title":"图片并茂教你搭建hexo博客,部署github,更换主题","slug":"图片并茂教你搭建hexo博客,部署github,更换主题","date":"2017-03-05T14:48:33.000Z","updated":"2018-01-10T07:55:33.000Z","comments":true,"path":"2017/03/05/图片并茂教你搭建hexo博客,部署github,更换主题/","link":"","permalink":"http://zedxpp.com/2017/03/05/图片并茂教你搭建hexo博客,部署github,更换主题/","excerpt":"","text":"必备环境 Git(安装了Xcode就会自带, 所以不再赘述) Node.js可以用很多种方式安装Node.js, 但是为了必免因缺少各种环境而安装失败, 这里推荐直接下载安装包安装.https://nodejs.org/zh-cn/download/ Hexo 打开终端, 输入npm install -g hexo-cli进行安装. 搭建本地HexoHexo只是帮你生成静态网页博客的工具, 你可以在本地进行调试. 如果你想让别人也能看到. 你必须上传到github或者自己的vps服务器. 别急, 接下来我都会为你讲解如何操作. 1.为了测试方便, 我把我的本地环境搭建在桌面的某个文件夹. 你也可以存放到你想存放的文件夹去. 注: 如果你想存放到别的地方, 那么你需要打开想存放的地方, 并且cd进去, 拖拽目标文件夹到终端, 既可获取目标路径, 拷贝路径, 然后cd进去既可. 2.打开终端, 输入cd Desktop到桌面. 3.我准备把环境搭建在桌面的peng文件夹中, 所以我继续在终端输入mkdir peng创建名叫peng的文件夹. 4.cd peng进入叫peng的文件夹中. 5.输入hexo init进行初始化. 6.输入npm install进行安装, 过一会儿会卡在&gt; node scripts/install.js这里, 你继续等待既可, 当出现如下图片, 安装成功. 7.输入npm install hexo-deployer-git --save安装简化命令的插件. 8.输入hexo s, 并且拷贝地址http://0.0.0.0:4000/到浏览器, 进行本地预览. 9.对, 就是这么简单, 本地环境搭建成功. 按control + c退出预览.不要关掉终端, 待会所有的操作, 都要在这个叫peng的文件夹中操作 10.接下来我们需要让本地环境生成静态网页, 并且上传到github中. 部署博客到github pages1.打开github.com并且登录你的账号, 账号必须已经通过了邮箱认证点击 Verify email address 链接验证邮箱, 否则可能导致部署失败出现404. 在你注册账号的时候, github就会发送邮件到你的邮箱. 2.登录账号后, 点击右上角的github头像, 点击Your profile. 3.然后将浏览器地址栏,红框框起来的github用户名记录下来. 4.点击右上角的+号按钮, 创建新的仓库. 5.仓库名必须是你的用户名.github.io组成, 其他的都可以不用管, 填完仓库名后, 直接Create repository既可. 6.点击按钮复制并且记录仓库地址, 待会要用到. 7.在终端输入open _config.yml, 打开hexo配置文件, 滑动到最下面, 找到deploy, repository和branch这两个默认没有, 你按我的格式粘贴既可. type后面写git, repository后面是你刚刚复制并记录的仓库地址, branch直接写master既可, 然后保存并关闭 1234deploy: type: git repository: https://github.com/pengpengtest/pengpengtest.github.io.git branch: master 8.输入hexo g -d, 重新生成并部署网页到github仓库.期间会让你输入账号和密码.账号和密码每输入完一项回车既可.密码是不会显式出现的. 9.出现下图,表示部署博客到github仓库成功.打开github仓库, 里面已经有了文件了. 10.接下来在浏览器输入你的用户名.github.io打开.博客已成功部署到github仓库!别人也可以通过这个地址你的用户名.github.io来访问你的博客了! 发布新文章1.在终端输入hexo n &quot;文章名&quot;, 创建文章.并且用open xxxxx打开它. 写入文章内容. 2.分别输入hexo g(生成)和hexo d(部署)后, 或者直接hexo g -d后, 再打开你的用户名.github.io. 新的文章也发布成功了.(有时候可能需要清除一下浏览器缓存才行) 分别输入hexo g和hexo d等效于hexo g -d. 更换hexo主题1.在搜索引擎搜索 hexo theme 既可. 2.在这里, 我们用iissnan/hexo-theme-next主题来演示.首先进入你想用的主题github仓库, 拷贝仓库地址. 3.在终端输入git clone 主题仓库地址 theme/主题名字.接下来一顿下载. git clone https://github.com/iissnan/hexo-theme-next.git themes/iissnan 4.下载完成后, 输入open _config.yml找到theme,修改hexo配置, 告诉hexo你想用的主题名字. 5.接下来hexo clean清理缓存, hexo g -d重新生成博客并且部署. 打开你的用户名.github.io, 更换主题成功!(有时候可能需要清除一下浏览器缓存才行, 浏览器缓存就是这么麻烦, 你懂的) 6.以后想更换主题, 按这个步骤来就行了.清理缓存并不会删除你的文章, 可以放心操作. 用github当图床如果需要用github当图床, 可以把图片放到本地hexo目录/source/文件夹里面, 我是新建了一个images来存放的. 需要先部署和生成, 把图片放到github上, 才能通过链接找到. 如果是直接放在source目录下, 那么你的图片链接地址就是http://域名/图片名.图片后缀. 比如:http://zedxpp.com/favicon.ico这个小图标, 我是做了https转发, 所以实际浏览器上显示的链接不一样(你可以直接拷贝我给的链接查看) 如果是放在二级目录下, 就需要加上目录名称, 比如我放在images下的这个头像, 那么就是http://zedxpp.com/images/icon.jpg 科普时间 重点: 所有hexo xxx的操作, 必须用终端cd 你本地环境目录下, 然后才能用hexo xxx操作. 有时候明明已经新建, 修改了文章, 或者改变了博客或主题的各种配置, 并且生成部署了, 还是不能显示, 可能是github还没缓存好, 稍微等半分钟的样子, 再看看. 不行就清理浏览器缓存. 还是不行, 就hexo clean清理本地缓存. 再重新生成和部署. hexo本地环境介绍 123_config.yml 用来存放hexo博客的个人描述, 博客小图标地址, 头像地址等等.source下的_posts 存放你所有的博文.md文件 你可以通过 hexo n \"xxx\" 创建博客文章, 也可以直接把xxx.md 格式的文件直接拖入进去themes 存放你的所有主题文件 各种hexo xxx操作1234hexo clean 清理缓存, 一般是在配置不能生效, 或者文章发布了不显示, 等等异常情况下使用的. 当然有时候清除浏览器缓存也是必须的操作.hexo g 重新生成静态网页, 所有发布文章, 修改文章, 修改hexo配置, 修改主题配置等等操作, 都需要.hexo d 让你的静态网页从本地部署到githubhexo s 你可以边写文章, 边使用这个命令在本地预览, 包括修改各种配置, 都可以预览. 必备语法和工具 使用hexo博客, 你需要会markdown语法, 才能编写更漂亮排版的文章.自行搜索markdown 语法关键字查找. 并且你需要一个能识别并编写markdown语法的编辑器. 自行搜索markdown 编辑器关键字查找. 各种免费的, 收费的.","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://zedxpp.com/categories/Hexo/"}],"tags":[{"name":"搭建Hexo","slug":"搭建Hexo","permalink":"http://zedxpp.com/tags/搭建Hexo/"},{"name":"部署Hexo","slug":"部署Hexo","permalink":"http://zedxpp.com/tags/部署Hexo/"},{"name":"更换Hexo主题","slug":"更换Hexo主题","permalink":"http://zedxpp.com/tags/更换Hexo主题/"}]},{"title":"利用VPS搭建科学上网工具和个人博客(教程合集)","slug":"利用VPS搭建科学上网工具和个人博客(教程合集)","date":"2017-02-25T14:34:53.000Z","updated":"2018-01-10T07:55:19.000Z","comments":true,"path":"2017/02/25/利用VPS搭建科学上网工具和个人博客(教程合集)/","link":"","permalink":"http://zedxpp.com/2017/02/25/利用VPS搭建科学上网工具和个人博客(教程合集)/","excerpt":"","text":"前言从教程中, 你可以收获什么? 如何购买搬瓦工vps 如何使用搬瓦工vps后台 如何搭建Shadowsocks Sever来实现多终端翻墙. 如何搭建个人hexo博客, 如何用github当博客图床, 更换hexo主题 如何为博客配置个性域名 如何使用vps存放个人博客 如何使用vps当图床 如何为博客配置https 以上内容都是我全部亲测过, 中横线部分, 会在下来的日子更新, 请持续关注. 搭建一个翻墙工具, 上google找文章, 存放个人博客, 把vps当图床, 都还是比较值得的.毕竟入门款的vps, 算上优惠码, 一年也仅仅只需要19美刀左右. 文章收集了从购买vps, 搭建Shadowsocks, 搭建Ipsec等一系列文章. 并结合自己使用时碰到的问题, 一一分享给大家. 文章内容, 假设阅读者是没有任何购买和搭建vps的经验, 所以会尽量讲解的比较仔细. 文章内容均以搬瓦工vps来讲解. 以下购买和登录后台的教程来自http://banwagong.cn/, 实际操作均在搬瓦工官网. 环境vps: 搬瓦工工具: Mac终端 购买和使用注: 搬瓦工vps支付方式支持 PayPal AliPay Credit Card(Stripe) 搬瓦工官网 搬瓦工购买方案 图文并茂购买指导教程 注: 购买时长分月付, 季度付, 半年付, 年付 选择登录已购VPS方案面板 注: 不知道你自己的服务器ip和密码, 用此方式登录已知你的服务器ip和密码, 可以直接进入搬瓦工面板登录 教程中的vps系统都是centos-6-x86的.请安装一致. 自主任意更换机房实现换IP (无此需求可略过) 重新安装Linux系统过程及注意事项 (无此需求可略过) 注: 切换机房ip和重装系统, 请先stop服务器 插曲建议大家购买搬瓦工vps后, 从官网的已购列表进入kiwivm面板, 记录自己的ip地址, 并更改kiwivm面板的密码. 避免每次进入kiwivm面板都要从官网操作好几步才能进. kiwivm搬瓦工面板登录入口 ip地址查看(教程中的ip地址都是这个) 修改kiwivm面板密码 一键搭建Shadowsocks下载Shadowsocks可以在Windows/Mac/iPhone系统上使用. windows下载地址 mac下载地址 iphoneApp下载地址 安装Shadowsocks Sever 在左边部分菜单栏滑动到底部, 点击shadowsocks sever之后, 如果没有安装过shadowsocks sever, 就需要点击install来一键安装shadowsocks sever. 请记录页面上的port和password.后面设置会用到. Windows/Mac/iPhone上的shadowsocks软件设置都差不多, 所以这里只讲一种, 以mac为例 为方便讲解, 后面会统一叫Shadowsocks为小飞机! 配置Shadowsocks软件下载并打开软件后在状态栏找到软件, 对! 就是一个飞机的样子=. = 红色框住的部分是我们可能会使用到. 自动代理模式: 需要翻墙的会自动翻墙, 不需要的就不翻墙. 全局模式: 所有的都会翻墙. 服务器: 选择, 增加, 减少, 编辑服务器设定. 编辑自动模式的PAC: 如果你需要指定某个网站强制翻墙, 那么你需要点击它, 并且编辑gfwlist.js文件, 照着葫芦画瓢, 加上网站地址既可, 如果用mac自带的文本编辑来编辑文件, 请务必注意双引号的区别!!!否则可能导致无法使用小飞机. 生成二维码和扫描二维码: 在iPhone上或者mac上, 为了快速的分享你的小飞机的服务器配置, 可能会使用到. 扫描一下生成的二维码, 既可添加配置. 不用你在多设备的时候输入N遍. 帮助: 当你想下载最新的小飞机版本, 或者找不到小飞机下载地址, 可以点它. 在图中填入服务器ip地址, 填入刚刚在shadowsocks sever中的prot端口号和密码, 加密方式不动它. 备注随便填~然后点击确定既可.接下来就是打开浏览器, 输入google.com来测试你的成果~ iPhone/iPad实现VPN翻墙, 有两种方式. 一种是使用Wingy - Http(s),Socks5 Proxy Utility这个app软件+之前配置的Shadowsocks Sever来实现, 并且软件支持Widget一键翻墙. 一种是需要在vps服务器安装ipsec, 稍微比较麻烦点. 并且需要在设置-&gt;通用-&gt;VPN中配置一次. 但是不需要下载任何软件. 以后使用, 直接打开设置&gt;打开VPN既可.(我个人是比较喜欢这种方式, 不想安装软件) 如果你选择了第二种方式, 那么, 请接着往下看. 在VPS上配置iPsec以下内容均来自https://quericy.me/blog/699/, 我只是在他的教程基础上进行了重新整理, 并补充了一些说明, 让你更快的配置iPsec, 所以你直接按照我的步骤来既可. 接下来会使用vim编辑内容, 如果你不会vim, 那么请点开查看vim的简单使用.如果你会vim的使用, 那么请继续往下看. 1.打开root shell - interactive, 点击launch 2.界面会跳转并变大变小几次来进行加载, 然后输入passwd, 修改服务器密码, 服务器密码和kiwivm后台是两个互不干扰的密码, 但是建议改成一样.输入新密码, 回车, 再次输入, 回车, 出现下图最后一句话, 表示密码修改成功. 3.打开kiwivm首页, 找到ip地址和ssh port端口地址并记录下来 4.打开mac终端, 输入ssh root@你的ip地址 -p SSH Port端口号如: ssh root@192.192.192.192 -p 28400 5.会提示你输入密码, 输入刚刚修改的服务器密码.出现[root@localhost ~]#表示连接成功. 6.输入 wget --no-check-certificate https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/master/one-key-ikev2.sh7.等进度走完了, 继续输入chmod +x one-key-ikev2.sh8.输入bash one-key-ikev2.sh9.出现这个时, 请输入2并回车 10.接下来只要有停顿, 也是直接回车既可.11.当出现install complete, 说明安装成功了. 12.打开sysctl文件, 输入vim /etc/sysctl.conf修改net.ipv4.ip_forward = 1, 把0改成1找到以下四个, 分别在每句最前面加上#把当前行注释掉. 1234net.bridge.bridge-nf-call-ip6tablesnet.bridge.bridge-nf-call-iptablesnet.bridge.bridge-nf-call-arptablesnet.nf_conntrack_max 如: #net.bridge.bridge-nf-call-ip6tables...... 13.使用以下指令刷新sysctl, 输入：sysctl -p 14.输入vim /usr/local/etc/ipsec.secrets并编辑, 编辑完后保存并退出编辑. 账号格式: 账号 %any : EAP &quot;密码&quot;, 密码用&quot;&quot;双引号包起来, 如果你只需要一个, 就添加一个, 如果需要多个, 换行添加. 12345: RSA server.pem: PSK \"myPSKkey\": XAUTH \"myXAUTHPass\"peng %any : EAP \"123456\"peng2 %any : EAP \"123456\" 15.输入ipsec start启动ipsec 1234567ipsec常用指令ipsec start #启动服务ipsec stop #关闭服务ipsec restart #重启服务ipsec reload #重新读取ipsec status #查看状态ipsec --help #查看帮助 16.服务器重启后, ipsec是不会自动启动的, 所以我们需要把它添加到自启动.在终端输入vim /etc/rc.local,添加/usr/local/sbin/ipsec start 添加后如图: 17.然后打开手机, 设置-&gt;通用-&gt;VPN-&gt;添加VPN配置 下图中的PSK是有用的 18.点击完成后, 回到VPN页面点连接既可. 19.如果你的手机上没有装任何小飞机的软件, 你后续使用, 就直接点这个就可以了.否则你需要进到 设置-&gt;通用-&gt;VPN-&gt;连接. 未完待续, 请关注我!~","raw":null,"content":null,"categories":[{"name":"VPS","slug":"VPS","permalink":"http://zedxpp.com/categories/VPS/"}],"tags":[{"name":"VPS科学上网","slug":"VPS科学上网","permalink":"http://zedxpp.com/tags/VPS科学上网/"}]},{"title":"Vim的简单使用","slug":"Vim的简单使用","date":"2017-02-25T14:34:07.000Z","updated":"2018-01-21T02:44:30.000Z","comments":true,"path":"2017/02/25/Vim的简单使用/","link":"","permalink":"http://zedxpp.com/2017/02/25/Vim的简单使用/","excerpt":"","text":"为配合教程, 所以简单的介绍下vim的基础使用. 当你在终端输入vi xxx或者vim xxx的后.会进入下图的状态, 请多注意左下角, 每一个步骤左下角都会有变化. 1.未编辑状态 2.按键盘上的i进入编辑状态, 然后输入内容输入前输入后 3.按esc退出编辑状态 4.输入:wq保存并退出 5.保存并退出后","raw":null,"content":null,"categories":[{"name":"Vim","slug":"Vim","permalink":"http://zedxpp.com/categories/Vim/"}],"tags":[{"name":"Vim使用","slug":"Vim使用","permalink":"http://zedxpp.com/tags/Vim使用/"},{"name":"VPS","slug":"VPS","permalink":"http://zedxpp.com/tags/VPS/"}]},{"title":"Quartz2D","slug":"Quartz2D","date":"2016-05-08T08:22:53.000Z","updated":"2016-05-08T08:22:53.000Z","comments":true,"path":"2016/05/08/Quartz2D/","link":"","permalink":"http://zedxpp.com/2016/05/08/Quartz2D/","excerpt":"Quartz2D简介\nQuartz 2D是一个二维图形绘制引擎，支持iOS环境和Mac OS X环境。\nQuartz 2D以PDF的规范为基础的图形库，用来绘制二维文字和图形，允许相同的绘图指令在任何装置上，使用可以得到的最佳分辨率，产生相同的输出。\nQuartz 2D API可以实现许多功能，如基于路径的绘图、透明度、阴影、颜色管理、反锯齿、PDF文档生成和PDF元数据访问等。","text":"Quartz2D简介 Quartz 2D是一个二维图形绘制引擎，支持iOS环境和Mac OS X环境。 Quartz 2D以PDF的规范为基础的图形库，用来绘制二维文字和图形，允许相同的绘图指令在任何装置上，使用可以得到的最佳分辨率，产生相同的输出。 Quartz 2D API可以实现许多功能，如基于路径的绘图、透明度、阴影、颜色管理、反锯齿、PDF文档生成和PDF元数据访问等。 Quartz 2D API是Core Graphics框架的一部分，因此其中的很多数据类型和方法都是以CG开头的。会经常见到Quartz 2D（Quartz）和Core Graphics两个术语交互使用。 Quartz 2D与分辨率和设备无关，因此在使用Quartz 2D绘图时，无需考虑最终绘图的目标设备。 注:本文内容均来自, 我自己学习过程中的整理, Quartz2D介绍部分来自 Rynn的博客 具体更详细的Quartz2D介绍可以点击链接查看, 本博文主要以实战代码为主. 学习Quartz2D必须了解的方法 - (void)drawRect:(CGRect)rect123- (void)drawRect:(CGRect)rect &#123; // Drawing code&#125; 对View进行绘制, 必须在这个方法内进行codeing. 因为只有在这个方法中才能获取到跟View相关联的上下文.(系统内部会创建好上下文, 我们只需要直接get获取就好) 当View即将显示的时候, 会自动调用这个方法. - (void)drawRect:(CGRect)rect 中的rect参数, 可以获取到当前View的CGRect 准备 新建项目, 在项目里面创建一个UIView. 自定义一个继承UIView的类, 并且让创建出来的UIView的类型, 继承自你刚刚自定义的那个类. 接下来我们就可以在刚刚自定义的类, - (void)drawRect:(CGRect)rect的方法中愉快的玩耍了. 一般新建一个继承自UIView的类, 在.m中会自动帮我们生成好- (void)drawRect:(CGRect)rect方法, 我们只需要打开就好. 12345678910111213#import \"DrawView.h\"@implementation DrawView/*// Only override drawRect: if you perform custom drawing.// An empty implementation adversely affects performance during animation.- (void)drawRect:(CGRect)rect &#123; // Drawing code&#125;*/@end 画线画一条直线12345678910111213141516171819- (void)drawRect:(CGRect)rect &#123; // 获取图形上下文(在 drawRect: 方法中, 系统已经帮我们创建好了图形上下文) CGContextRef ctx = UIGraphicsGetCurrentContext(); // 创建路径 UIBezierPath *path = [UIBezierPath bezierPath]; // 设置起点 [path moveToPoint:CGPointMake(50, 100)]; // 添加一条线到某个点 [path addLineToPoint:CGPointMake(200, 200)]; // 添加路径到图形上下文 CGContextAddPath(ctx, path.CGPath); // 绘制 CGContextStrokePath(ctx);&#125; 两点成一线, 所以我们设置起点, 设置终点, 就可以画线 CGContextAddPath(ctx, path.CGPath); 因为这个函数需要接收的参数是CGPathRef, 而我们创建的并不是, 所以我们需要调用UIBezierPath类的- (CGPathRef)CGPath方法, 把 UIBezierPath类型转换成CGPathRef. 画两条直线 想要实现画两条或多条直线的方法, 有两种方式. 第一种 12345678910111213141516171819202122232425- (void)drawRect:(CGRect)rect &#123; // 获取图形上下文(在 drawRect: 方法中, 系统已经帮我们创建好了图形上下文) CGContextRef ctx = UIGraphicsGetCurrentContext(); // 创建路径 UIBezierPath *path = [UIBezierPath bezierPath]; // 设置起点 [path moveToPoint:CGPointMake(50, 100)]; // 设置终点 [path addLineToPoint:CGPointMake(200, 200)]; // 一个路径对象可以包含很多线段, 所以我们可以继续设置起点 [path moveToPoint:CGPointMake(50, 200)]; // 设置终点 [path addLineToPoint:CGPointMake(100, 200)]; // 添加路径到图形上下文 CGContextAddPath(ctx, path.CGPath); // 绘制 CGContextStrokePath(ctx);&#125; 第二种 1234567891011121314151617181920212223242526272829303132- (void)drawRect:(CGRect)rect &#123; // 获取图形上下文(在 drawRect: 方法中, 系统已经帮我们创建好了图形上下文) CGContextRef ctx = UIGraphicsGetCurrentContext(); // 创建路径 UIBezierPath *path = [UIBezierPath bezierPath]; // 设置起点 [path moveToPoint:CGPointMake(200, 100)]; // 设置终点 [path addLineToPoint:CGPointMake(200, 200)]; // 添加路径到图形上下文 CGContextAddPath(ctx, path.CGPath); // 因为上一个路径已经添加到了图形上下文中了, 所以我们可以重新创建一个UIBezierPath对象, // 来改变path的指针指向. path = [UIBezierPath bezierPath]; // 设置起点,移动到某个位置 [path moveToPoint:CGPointMake(30, 200)]; // 设置终点 [path addLineToPoint:CGPointMake(100, 200)]; // 添加路径到图形上下文 CGContextAddPath(ctx, path.CGPath); // 绘制 CGContextStrokePath(ctx);&#125; 对比完两种方法, 第二种方法比第一种方法多了几个步骤, 1.重新创建新的路径 2.设置起点, 终点 3.添加路径到上下文. 从实用角度来讲, 我个人更倾向于第二种, 自己的路径, 自己的路径对象进行管理, 从代码行数角度来讲, 当然是第一种好. 上面所讲的方法是用来绘制平行或无连接关系的线段. 画有 连接关系 的线段和设置线段的属性1234567891011121314151617181920212223242526272829303132- (void)drawRect:(CGRect)rect &#123; // 获取图形上下文 CGContextRef ctx = UIGraphicsGetCurrentContext(); // 创建路径 UIBezierPath *path = [UIBezierPath bezierPath]; // 设置起点 [path moveToPoint:CGPointMake(30, 100)]; // 设置终点 [path addLineToPoint:CGPointMake(200, 200)]; // 设置第二根线的终点 [path addLineToPoint:CGPointMake(100, 100)]; // 添加路径到图形上下文 CGContextAddPath(ctx, path.CGPath); // 设置线宽 CGContextSetLineWidth(ctx, 10); // 设置线条两端的样式为圆角 CGContextSetLineCap(ctx, kCGLineCapRound); // 设置线条连接处的样式为圆角 CGContextSetLineJoin(ctx, kCGLineJoinRound); // 绘制 CGContextStrokePath(ctx);&#125; 如果画的线段是连接在一起的, 可以直接设置第二根线的终点, 不必重现设置起点. 设置线条两端的样式和连接处的样式的参数是枚举, 剩下的样式请自行尝试. UIBezierPath 因为UIBezierPath类里面已经帮我们封装好了很多东西, 所以绘制线段有更快捷的方法. 1234567891011- (void)drawRect:(CGRect)rect &#123; UIBezierPath *path = [UIBezierPath bezierPath]; [path moveToPoint:CGPointMake(50, 50)]; [path addLineToPoint:CGPointMake(200, 200)]; [path stroke]; &#125; 总结123456789绘制步骤可以分成四个大的步骤1. 获取当前View的图形上下文2. 创建路径 2.1 设置起点 2.2 设置终点 2.3 ....3. 添加路径到图形上下文4. 绘制 绘制基本图形矩形和正方形正方形123456- (void)drawRect:(CGRect)rect &#123; // 第一个参数表示需要绘制图形的frame, 第二个参数表示半径(可以通过修改这个参数来达到绘制带圆角的图形和绘制圆形) UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(50, 50, 160, 160) cornerRadius:0]; [path stroke];&#125; 圆角矩形123456- (void)drawRect:(CGRect)rect &#123; UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(50, 50, 160, 100) cornerRadius:20]; [path stroke];&#125; 圆型123456- (void)drawRect:(CGRect)rect &#123; UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(50, 50, 150, 150) cornerRadius:75]; [path stroke];&#125; 这里只放置3种样式的代码, 其他样式可以修改参数, 通过这个方法来绘制正方形, 矩形, 圆角正方形, 圆角矩形, 圆形,等… 椭圆1234- (void)drawRect:(CGRect)rect &#123; UIBezierPath *path = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(30, 30, 200, 100)]; [path stroke];&#125; 用以上方法同样也可以绘制圆形 圆弧123456789101112131415- (void)drawRect:(CGRect)rect &#123; // 获取当前控件的圆心 CGPoint center = CGPointMake(rect.size.width * 0.5, rect.size.height * 0.5); // 获取半径 CGFloat radius = rect.size.width * 0.5 * 0.5; /* 参数一 需要绘制圆弧的圆心在哪, 参数二 圆弧到圆心的半径, 参数三 圆弧开始角度, 参数四 圆弧结束角度, 参数五 传入YES表示顺时针, 传入NO表示逆时针 */ UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:center radius:radius startAngle:0 endAngle:M_PI clockwise:YES]; [path stroke];&#125; 从以上图片可以看出, 开始角度并不是从12点钟方向开始的, 而是从3点钟方向开始的. 所以在绘制圆弧的时候需要注意, 如果需要从12点钟方向开始, 那么开始角度应该是-90度开始 在OC中, 已经定义好了一些常用的宏, M_PI表示180°, M_PI_2表示90°, M_PI_4表示45°.(具体可以跳到头文件进行查看) 具体角度与弧度互转, 引用至百度知道的答案 弧度 ＝ (角度 / 180) PIPI就是“派”比如180度角，转换之后的弧度就是PI，45度的话是四分之一PI。反过来也一样，角度 = 弧度 / PI 180 扇形123456789101112131415161718- (void)drawRect:(CGRect)rect &#123; // 获取圆心 CGPoint center = CGPointMake(rect.size.width * 0.5, rect.size.height * 0.5); // 创建路径 UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:center radius:100 startAngle:0 endAngle:M_PI_2 clockwise:YES]; // 添加一根线到圆心 [path addLineToPoint:center]; // 从圆心添加线到圆弧的起始点 // [path addLineToPoint:CGPointMake(center.x + 100, center.y)]; // 关闭路径 [path closePath]; // 绘制 [path stroke];&#125; 从上述代码可以看出, 绘制扇形, 其实就是先绘制圆弧, 然后添加一根线到圆心, 再添加一根线到圆弧的起始点位置, 就组成了一个扇形. UIBezierPath类为我们提供了更加便捷的方法, 所以在添加第二根线, 圆心到圆弧起始点位置, 我们可以直接调用[path closePath]的对象方法, 这样也减少了位置的计算. 扇形的描边和填充修改描边颜色123456789101112- (void)drawRect:(CGRect)rect &#123; // 此处省略创建路径等代码, 重点讲解如何描边 // 关闭路径 [path closePath]; // 设置描边颜色 [[UIColor greenColor] setStroke]; // 绘制 [path stroke];&#125; 在关闭路径后, 绘制之前, 如果我们需要设置扇形的线条颜色, 可以通过setStroke方法来设置颜色. 填充123456789101112131415- (void)drawRect:(CGRect)rect &#123; // 获取圆心 CGPoint center = CGPointMake(rect.size.width * 0.5, rect.size.height * 0.5); // 创建路径 UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:center radius:100 startAngle:0 endAngle:M_PI_2 clockwise:YES]; // 添加一根线到圆心 [path addLineToPoint:center]; // 设置填充颜色 [[UIColor blueColor] setFill]; // 填充 [path fill];&#125; 如果你是需要填充扇形, 那么可以省略关闭路径这一步骤closePath 并且不再是调用stroke方法, 而是调用fill方法 同时填充和描边 如果你需要同时填充和描边扇形, 那么UIBezierPath并没有帮我们封装类似的方法, 所以我们还是需要使用CoreGraphics框架中的C语言函数来实现. 12345678910111213141516171819202122232425262728293031- (void)drawRect:(CGRect)rect &#123; // 获取圆心 CGPoint center = CGPointMake(rect.size.width * 0.5, rect.size.height * 0.5); // 获取上下文 CGContextRef ctx = UIGraphicsGetCurrentContext(); // 创建路径 UIBezierPath *path = [UIBezierPath bezierPathWithArcCenter:center radius:100 startAngle:0 endAngle:M_PI_2 clockwise:YES]; // 添加一根线到圆心 [path addLineToPoint:center]; // 关闭路径 [path closePath]; // 把路径添加到上下文 CGContextAddPath(ctx, path.CGPath); // 设置填充颜色 [[UIColor blueColor] setFill]; // 设置描边颜色 [[UIColor greenColor] setStroke]; // 设置线宽 CGContextSetLineWidth(ctx, 5); // 渲染 (第二个形参表示绘画模式是填充和描边都需要, 这个参数是枚举) CGContextDrawPath(ctx, kCGPathFillStroke);&#125; 这里是需要关闭路径的, 不关闭会有问题. 你可以试试注释掉关闭路径的代码.","raw":null,"content":null,"categories":[{"name":"Quartz2D","slug":"Quartz2D","permalink":"http://zedxpp.com/categories/Quartz2D/"}],"tags":[{"name":"Quartz2D","slug":"Quartz2D","permalink":"http://zedxpp.com/tags/Quartz2D/"}]},{"title":"Swift导入SQLite库, Swift桥接OC 步骤","slug":"Swift导入SQLite库, Swift桥接OC 步骤","date":"2016-04-14T02:25:08.000Z","updated":"2018-01-21T02:45:41.000Z","comments":true,"path":"2016/04/14/Swift导入SQLite库, Swift桥接OC 步骤/","link":"","permalink":"http://zedxpp.com/2016/04/14/Swift导入SQLite库, Swift桥接OC 步骤/","excerpt":"注: 图中所用的Xcode版本为Xcode7.3\n导入库按下图顺序进行导入SQLite库","text":"注: 图中所用的Xcode版本为Xcode7.3 导入库按下图顺序进行导入SQLite库 桥接文件导入成功后, 新建一个Header File文件进行桥接 如果没有提示, 就按图中头文件名手动敲入 打开Build Settings, 输入bri关键字进行搜索, 找到图中我选中的 Objective-C Bridging Header 这一行, 点击此行右边空白的地方, 弹出输入框, 从左边的文件栏选中文件你的桥接文件拽入输入框, 然后删除前面多余的路径地址 然后编译一下, 成功就表示路径地址设置对了 随便回到哪个控制器, 能够敲出sqlite的方法, 并且编译成功, 就表示导入成功了 注意点:移除sqlite库文件的时候, 千万不要选择移除到废纸篓, 不然不小心清空废纸篓了, 那么你的库文件也被删掉了, 点击图中箭头指示的移除引用即可","raw":null,"content":null,"categories":[{"name":"Swift","slug":"Swift","permalink":"http://zedxpp.com/categories/Swift/"}],"tags":[{"name":"SQLite","slug":"SQLite","permalink":"http://zedxpp.com/tags/SQLite/"},{"name":"Swift","slug":"Swift","permalink":"http://zedxpp.com/tags/Swift/"}]}]}